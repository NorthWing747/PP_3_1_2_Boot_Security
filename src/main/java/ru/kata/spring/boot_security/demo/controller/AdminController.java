package ru.kata.spring.boot_security.demo.controller;

import ru.kata.spring.boot_security.demo.model.Role;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.service.UserService;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.HashSet;
import java.util.Set;

@Controller
@RequestMapping("/admin")
@PreAuthorize("hasRole('ADMIN')")
public class AdminController {

    private final UserService userService;

    public AdminController(UserService userService) {
        this.userService = userService;
    }

    // üìã –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
    @GetMapping
    public String adminPage(Model model) {
        model.addAttribute("users", userService.getAll());
        return "admin";
    }

    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/addUser")
    public String showAddUserForm(Model model) {
        model.addAttribute("user", new User());
        return "addUser";
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –û–î–ù–û–ô —Ä–æ–ª—å—é
    @PostMapping("/addUser")
    public String addUser(@ModelAttribute User user,
                          @RequestParam(value = "selectedRole", required = false) String selectedRole) {

        // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Ä–æ–ª–µ–π —Å –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
        if (selectedRole != null && !selectedRole.trim().isEmpty()) {
            Set<Role> roles = new HashSet<>();
            Role role = new Role();
            role.setName(selectedRole);
            roles.add(role);
            user.setRoles(roles);
        } else {
            // –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            Set<Role> roles = new HashSet<>();
            Role defaultRole = new Role();
            defaultRole.setName("ROLE_USER");
            roles.add(defaultRole);
            user.setRoles(roles);
        }

        userService.save(user);
        return "redirect:/admin";
    }

    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/editUser")
    public String showEditUserForm(@RequestParam Long id, Model model) {
        User user = userService.getById(id);
        model.addAttribute("user", user);
        return "editUser";
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –û–î–ù–û–ô —Ä–æ–ª—å—é
    @PostMapping("/editUser")
    public String updateUser(@ModelAttribute User user,
                             @RequestParam(value = "selectedRole", required = false) String selectedRole) {

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (selectedRole != null && !selectedRole.trim().isEmpty()) {
            Set<Role> roles = new HashSet<>();
            Role role = new Role();
            role.setName(selectedRole);
            roles.add(role);
            user.setRoles(roles);
        }
        // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏

        userService.updateUser(user);
        return "redirect:/admin";
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @PostMapping("/deleteUser")
    public String deleteUser(@RequestParam Long id) {
        userService.delete(id);
        return "redirect:/admin";
    }
}