package ru.kata.spring.boot_security.demo.service;

import ru.kata.spring.boot_security.demo.model.Role;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.repository.RoleRepository;
import ru.kata.spring.boot_security.demo.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import java.util.*;

@Service
@Transactional
public class UserServiceImpl implements UserService, UserDetailsService {

    private static final Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserServiceImpl(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
        logger.info("UserServiceImpl –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    // üîê –†–µ–∞–ª–∏–∑–∞—Ü–∏—è UserDetailsService –¥–ª—è Spring Security
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É: {}", username);

        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> {
                    logger.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
                    return new UsernameNotFoundException("User not found: " + username);
                });

        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} (—Ä–æ–ª–∏: {})", username, user.getRoles());
        return user;
    }

    // üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    @PostConstruct
    public void initTestUsers() {
        logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

        try {
            // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
            Role roleUser = roleRepository.findByName("ROLE_USER")
                    .orElseGet(() -> {
                        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ ROLE_USER");
                        return roleRepository.save(new Role("ROLE_USER"));
                    });

            Role roleAdmin = roleRepository.findByName("ROLE_ADMIN")
                    .orElseGet(() -> {
                        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ ROLE_ADMIN");
                        return roleRepository.save(new Role("ROLE_ADMIN"));
                    });

            // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!userRepository.existsByUsername("user")) {
                User user = new User("User", "Userov", 25, "user", passwordEncoder.encode("user"), "user@example.com");
                user.setRoles(new HashSet<>(Collections.singletonList(roleUser)));
                userRepository.save(user);
                logger.info("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user/user");
            } else {
                logger.debug("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'user' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }

            // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (!userRepository.existsByUsername("admin")) {
                User admin = new User("Admin", "Adminov", 30, "admin", passwordEncoder.encode("admin"), "admin@example.com");
                admin.setRoles(new HashSet<>(Collections.singletonList(roleAdmin)));
                userRepository.save(admin);
                logger.info("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin/admin");
            } else {
                logger.debug("–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 'admin' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
            fixExistingUsersWithoutRoles();

            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", e);
        }
    }

    // üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
    @PostConstruct
    public void fixExistingUsersWithoutRoles() {
        logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π...");

        List<User> users = userRepository.findAll();
        Role userRole = roleRepository.findByName("ROLE_USER")
                .orElseGet(() -> {
                    logger.warn("–†–æ–ª—å ROLE_USER –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é");
                    return roleRepository.save(new Role("ROLE_USER"));
                });

        boolean fixed = false;
        for (User user : users) {
            if (user.getRoles() == null || user.getRoles().isEmpty()) {
                logger.info("–ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å ROLE_USER –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", user.getUsername());
                Set<Role> roles = new HashSet<>();
                roles.add(userRole);
                user.setRoles(roles);
                userRepository.save(user);
                fixed = true;
            }
        }

        if (fixed) {
            logger.info("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ä–æ–ª–µ–π");
        } else {
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    }

    // üìã CRUD –º–µ—Ç–æ–¥—ã
    @Override
    public List<User> getAll() {
        logger.debug("–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        List<User> users = userRepository.findAll();
        logger.debug("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}", users.size());
        return users;
    }

    @Override
    public User getById(Long id) {
        logger.debug("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {}", id);

        User user = userRepository.findById(id)
                .orElseThrow(() -> {
                    logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å ID: {}", id);
                    return new RuntimeException("User not found with id: " + id);
                });

        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} (ID: {})", user.getUsername(), id);
        return user;
    }

    @Override
    public User save(User user) {
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–≥–∏–Ω–æ–º: {}", user.getUsername());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {
            logger.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É—Å—Ç—ã–º –ª–æ–≥–∏–Ω–æ–º");
            throw new RuntimeException("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        if (user.getPassword() == null || user.getPassword().trim().isEmpty()) {
            logger.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º: {}", user.getUsername());
            throw new RuntimeException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            logger.warn("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–æ–≥–∏–Ω–æ–º: {}", user.getUsername());
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '" + user.getUsername() + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        // –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        Role defaultRole = roleRepository.findByName("ROLE_USER")
                .orElseGet(() -> {
                    logger.warn("–†–æ–ª—å ROLE_USER –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é");
                    return roleRepository.save(new Role("ROLE_USER"));
                });

        Set<Role> roles = new HashSet<>();
        roles.add(defaultRole);
        user.setRoles(roles);

        User savedUser = userRepository.save(user);
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {} (ID: {}) —Å —Ä–æ–ª—è–º–∏: {}",
                savedUser.getUsername(), savedUser.getId(), savedUser.getRoles());

        return savedUser;
    }

    @Override
    public User updateUser(User user) {
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (ID: {})", user.getUsername(), user.getId());

        User existingUser = getById(user.getId());
        logger.debug("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∏–º—è={}, —Ñ–∞–º–∏–ª–∏—è={}, –≤–æ–∑—Ä–∞—Å—Ç={}",
                existingUser.getName(), existingUser.getSurname(), existingUser.getAge());

        existingUser.setName(user.getName());
        existingUser.setSurname(user.getSurname());
        existingUser.setAge(user.getAge());
        existingUser.setUsername(user.getUsername());
        existingUser.setEmail(user.getEmail());

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if (user.getPassword() != null && !user.getPassword().trim().isEmpty()) {
            existingUser.setPassword(passwordEncoder.encode(user.getPassword()));
            logger.debug("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getUsername());
        } else {
            logger.debug("–ü–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getUsername());
        }

        User updatedUser = userRepository.save(existingUser);
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {} (ID: {}) —Å —Ä–æ–ª—è–º–∏: {}",
                updatedUser.getUsername(), updatedUser.getId(), updatedUser.getRoles());

        return updatedUser;
    }

    @Override
    public void delete(Long id) {
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", id);

        User user = getById(id);
        userRepository.delete(user);

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {} (ID: {})", user.getUsername(), id);
    }

    // üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public void checkUserRoles() {
        logger.debug("=== –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –†–û–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===");

        List<User> users = userRepository.findAll();
        for (User user : users) {
            logger.info("User: {}, Email: {}, Roles: {}",
                    user.getUsername(),
                    user.getEmail(),
                    user.getRoles() != null ? user.getRoles() : "NULL");
        }

        logger.debug("=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –†–û–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===");
    }

    // üîß –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    public void assignRoleToUser(Long userId, String roleName) {
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {}", roleName, userId);

        User user = getById(userId);
        Role role = roleRepository.findByName(roleName)
                .orElseThrow(() -> {
                    logger.error("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", roleName);
                    return new RuntimeException("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + roleName);
                });

        if (user.getRoles() == null) {
            user.setRoles(new HashSet<>());
            logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getUsername());
        }

        user.getRoles().add(role);
        userRepository.save(user);

        logger.info("–†–æ–ª—å {} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", roleName, user.getUsername());
    }

    // üîç –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
    public Optional<User> findByEmail(String email) {
        logger.debug("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {}", email);

        // –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ UserRepository
        // Optional<User> user = userRepository.findByEmail(email);
        Optional<User> user = Optional.empty(); // –∑–∞–≥–ª—É—à–∫–∞

        if (user.isPresent()) {
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ email {}: {}", email, user.get().getUsername());
        } else {
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ email: {}", email);
        }

        return user;
    }
}