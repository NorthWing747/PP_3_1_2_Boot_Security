package ru.kata.spring.boot_security.demo.service;

import ru.kata.spring.boot_security.demo.model.Role;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.repository.RoleRepository;
import ru.kata.spring.boot_security.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import java.util.*;

@Service
@Transactional
public class UserServiceImpl implements UserService, UserDetailsService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserServiceImpl(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // üîê –†–µ–∞–ª–∏–∑–∞—Ü–∏—è UserDetailsService –¥–ª—è Spring Security
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));

        return user;
    }

    // üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    @PostConstruct
    public void initTestUsers() {
        // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
        Role roleUser = roleRepository.findByName("ROLE_USER")
                .orElseGet(() -> roleRepository.save(new Role("ROLE_USER")));

        Role roleAdmin = roleRepository.findByName("ROLE_ADMIN")
                .orElseGet(() -> roleRepository.save(new Role("ROLE_ADMIN")));

        // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userRepository.existsByUsername("user")) {
            User user = new User("User", "Userov", 25, "user", passwordEncoder.encode("user"), "user@example.com");
            user.setRoles(new HashSet<>(Collections.singletonList(roleUser)));
            userRepository.save(user);
            System.out.println("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user/user");
        }

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!userRepository.existsByUsername("admin")) {
            User admin = new User("Admin", "Adminov", 30, "admin", passwordEncoder.encode("admin"), "admin@example.com");
            admin.setRoles(new HashSet<>(Collections.singletonList(roleAdmin)));
            userRepository.save(admin);
            System.out.println("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin/admin");
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
        fixExistingUsersWithoutRoles();
    }

    // üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
    @PostConstruct
    public void fixExistingUsersWithoutRoles() {
        List<User> users = userRepository.findAll();
        Role userRole = roleRepository.findByName("ROLE_USER")
                .orElseGet(() -> roleRepository.save(new Role("ROLE_USER")));

        boolean fixed = false;
        for (User user : users) {
            if (user.getRoles() == null || user.getRoles().isEmpty()) {
                System.out.println("–ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + user.getUsername());
                Set<Role> roles = new HashSet<>();
                roles.add(userRole);
                user.setRoles(roles);
                userRepository.save(user);
                fixed = true;
            }
        }
        if (fixed) {
            System.out.println("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ä–æ–ª–µ–π");
        }
    }

    // üìã CRUD –º–µ—Ç–æ–¥—ã
    @Override
    public List<User> getAll() {
        return userRepository.findAll();
    }

    @Override
    public User getById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found with id: " + id));
    }

    @Override
    public User save(User user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {
            throw new RuntimeException("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        if (user.getPassword() == null || user.getPassword().trim().isEmpty()) {
            throw new RuntimeException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '" + user.getUsername() + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        // –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        Role defaultRole = roleRepository.findByName("ROLE_USER")
                .orElseGet(() -> roleRepository.save(new Role("ROLE_USER")));

        Set<Role> roles = new HashSet<>();
        roles.add(defaultRole);
        user.setRoles(roles);

        User savedUser = userRepository.save(user);
        System.out.println("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + savedUser.getUsername() + " —Å —Ä–æ–ª—è–º–∏: " + savedUser.getRoles());

        return savedUser;
    }

    @Override
    public User updateUser(User user) {
        User existingUser = getById(user.getId());
        existingUser.setName(user.getName());
        existingUser.setSurname(user.getSurname());
        existingUser.setAge(user.getAge());
        existingUser.setUsername(user.getUsername());
        existingUser.setEmail(user.getEmail());

        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if (user.getPassword() != null && !user.getPassword().trim().isEmpty()) {
            existingUser.setPassword(passwordEncoder.encode(user.getPassword()));
            System.out.println("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getUsername());
        }

        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
        // existingUser.setRoles(existingUser.getRoles());

        User updatedUser = userRepository.save(existingUser);
        System.out.println("–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + updatedUser.getUsername() + " —Å —Ä–æ–ª—è–º–∏: " + updatedUser.getRoles());

        return updatedUser;
    }

    @Override
    public void delete(Long id) {
        User user = getById(id);
        System.out.println("–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user.getUsername());
        userRepository.delete(user);
    }

    // üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public void checkUserRoles() {
        List<User> users = userRepository.findAll();
        System.out.println("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–û–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===");
        for (User user : users) {
            System.out.println("User: " + user.getUsername() +
                    ", Email: " + user.getEmail() +
                    ", Roles: " + (user.getRoles() != null ? user.getRoles() : "NULL"));
        }
        System.out.println("=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===");
    }

    // üîß –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    public void assignRoleToUser(Long userId, String roleName) {
        User user = getById(userId);
        Role role = roleRepository.findByName(roleName)
                .orElseThrow(() -> new RuntimeException("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + roleName));

        if (user.getRoles() == null) {
            user.setRoles(new HashSet<>());
        }
        user.getRoles().add(role);
        userRepository.save(user);
        System.out.println("–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å " + roleName + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + user.getUsername());
    }
}